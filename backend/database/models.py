"""
SQLAlchemy Database Models
All persistence models for STEALTH Bot
"""
from datetime import datetime
from sqlalchemy import Column, Integer, String, Float, Boolean, DateTime, JSON, Text, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()


class Signal(Base):
    """Trading signals generated by the system"""
    __tablename__ = 'signals'
    
    id = Column(Integer, primary_key=True)
    signal_id = Column(String(50), unique=True, nullable=False, index=True)
    symbol = Column(String(10), nullable=False, index=True)
    action = Column(String(10), nullable=False)  # BUY, SELL
    tier = Column(String(20), nullable=False, index=True)  # PLATINUM, GOLD, SILVER, BRONZE
    confidence = Column(Float, nullable=False)
    entry_price = Column(Float, nullable=False)
    target_price = Column(Float)
    stop_loss = Column(Float)
    
    # Technical data
    rsi = Column(Float)
    volume_ratio = Column(Float)
    obv_trend = Column(String(20))
    
    # Module scores
    momentum_score = Column(Float)
    volume_score = Column(Float)
    technical_score = Column(Float)
    sentiment_score = Column(Float)
    risk_score = Column(Float)
    
    # Metadata
    modules_data = Column(JSON)
    reasoning = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    expires_at = Column(DateTime)
    status = Column(String(20), default='ACTIVE')  # ACTIVE, EXECUTED, EXPIRED, REJECTED
    
    # Relationships
    trade = relationship("Trade", back_populates="signal", uselist=False)


class Trade(Base):
    """Executed trades"""
    __tablename__ = 'trades'
    
    id = Column(Integer, primary_key=True)
    trade_id = Column(String(50), unique=True, nullable=False, index=True)
    signal_id = Column(Integer, ForeignKey('signals.id'), nullable=False)
    symbol = Column(String(10), nullable=False, index=True)
    side = Column(String(10), nullable=False)  # BUY, SELL
    
    # Execution details
    entry_price = Column(Float, nullable=False)
    entry_time = Column(DateTime, default=datetime.utcnow)
    quantity = Column(Integer, nullable=False)
    position_size = Column(Float, nullable=False)
    
    # Exit details
    exit_price = Column(Float)
    exit_time = Column(DateTime)
    stop_loss = Column(Float)
    take_profit = Column(Float)
    
    # Performance
    pnl = Column(Float, default=0.0)
    pnl_percent = Column(Float, default=0.0)
    current_price = Column(Float)
    unrealized_pnl = Column(Float, default=0.0)
    
    # Status
    status = Column(String(20), default='OPEN', index=True)  # OPEN, CLOSED, STOPPED
    close_reason = Column(String(50))  # TAKE_PROFIT, STOP_LOSS, MANUAL, TIMEOUT
    
    # Metadata
    created_at = Column(DateTime, default=datetime.utcnow, index=True)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    signal = relationship("Signal", back_populates="trade")


class PerformanceLog(Base):
    """Daily performance metrics"""
    __tablename__ = 'performance_logs'
    
    id = Column(Integer, primary_key=True)
    date = Column(DateTime, nullable=False, unique=True, index=True)
    
    # P&L Metrics
    daily_pnl = Column(Float, default=0.0)
    total_pnl = Column(Float, default=0.0)
    winning_trades = Column(Integer, default=0)
    losing_trades = Column(Integer, default=0)
    total_trades = Column(Integer, default=0)
    
    # Performance Metrics
    win_rate = Column(Float, default=0.0)
    avg_win = Column(Float, default=0.0)
    avg_loss = Column(Float, default=0.0)
    profit_factor = Column(Float, default=0.0)
    sharpe_ratio = Column(Float, default=0.0)
    max_drawdown = Column(Float, default=0.0)
    
    # Tier breakdown
    tier_performance = Column(JSON)  # {PLATINUM: {pnl: X, trades: Y}, ...}
    
    created_at = Column(DateTime, default=datetime.utcnow)


class BotState(Base):
    """Bot runtime state and configuration"""
    __tablename__ = 'bot_state'
    
    id = Column(Integer, primary_key=True)
    key = Column(String(50), unique=True, nullable=False, index=True)
    value = Column(JSON)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class ModuleState(Base):
    """Module status and configuration"""
    __tablename__ = 'module_state'
    
    id = Column(Integer, primary_key=True)
    module_name = Column(String(50), unique=True, nullable=False, index=True)
    enabled = Column(Boolean, default=True)
    status = Column(String(20), default='idle')  # idle, running, error
    
    # Configuration
    config = Column(JSON)
    
    # Metrics
    total_runs = Column(Integer, default=0)
    successful_runs = Column(Integer, default=0)
    error_count = Column(Integer, default=0)
    avg_execution_time = Column(Float, default=0.0)
    last_run_at = Column(DateTime)
    last_error = Column(Text)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)


class Cooldown(Base):
    """Symbol cooldown tracking"""
    __tablename__ = 'cooldowns'
    
    id = Column(Integer, primary_key=True)
    symbol = Column(String(10), nullable=False, index=True)
    reason = Column(String(50))  # RECENT_SIGNAL, RECENT_TRADE, PATTERN_FAILURE
    expires_at = Column(DateTime, nullable=False, index=True)
    created_at = Column(DateTime, default=datetime.utcnow)


class RiskMetric(Base):
    """Historical risk assessments"""
    __tablename__ = 'risk_metrics'
    
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, default=datetime.utcnow, index=True)
    
    # Portfolio risk
    total_exposure = Column(Float, default=0.0)
    max_position_size = Column(Float, default=0.0)
    open_positions = Column(Integer, default=0)
    
    # Market risk
    market_volatility = Column(Float, default=0.0)
    vix_level = Column(Float)
    market_trend = Column(String(20))
    
    # Risk limits
    daily_loss_limit = Column(Float)
    position_limit = Column(Float)
    max_drawdown_limit = Column(Float)
    
    # Current usage
    current_daily_loss = Column(Float, default=0.0)
    current_exposure = Column(Float, default=0.0)
    current_drawdown = Column(Float, default=0.0)
    
    # Alerts
    alerts = Column(JSON)


class MarketDataCache(Base):
    """Cache for Yahoo Finance data"""
    __tablename__ = 'market_data_cache'
    
    id = Column(Integer, primary_key=True)
    symbol = Column(String(10), nullable=False, index=True)
    data_type = Column(String(20), nullable=False)  # quote, historical, info
    data = Column(JSON, nullable=False)
    expires_at = Column(DateTime, nullable=False, index=True)
    created_at = Column(DateTime, default=datetime.utcnow)


class UserSettings(Base):
    """User configuration and preferences"""
    __tablename__ = 'user_settings'
    
    id = Column(Integer, primary_key=True)
    setting_key = Column(String(100), unique=True, nullable=False, index=True)
    setting_value = Column(JSON)
    category = Column(String(50))  # risk, modules, trading, ui
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
